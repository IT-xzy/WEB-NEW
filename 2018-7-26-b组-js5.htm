<!DOCTYPE html>
<!-- saved from url=(0072)https://ptteng.github.io/PPT/PPT/js-02-This%20in%20javascriptCD.html#/26 -->
<html class=" js no-mobile desktop no-ie chrome chrome67 ppt-section ppt-section w-1024 gt-240 gt-320 gt-480 gt-640 gt-768 gt-800 lt-1280 lt-1440 lt-1680 lt-1920 no-portrait landscape gradient rgba opacity textshadow multiplebgs boxshadow borderimage borderradius cssreflections csstransforms csstransitions no-touch no-retina fontface domloaded" id="js-02-this%20in%20javascriptcd-page"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>葡萄藤PPT</title>
    <link rel="stylesheet" href="./葡萄藤PPT_files/reveal.css">
    <!-- PPT主题，可以在/css/reveal/theme/中选择其他主题，目前暂时只能使用该模板 -->
    <link rel="stylesheet" href="./葡萄藤PPT_files/ptt.css">
    <!-- syntax highlighting 代码高亮主题 -->
    <link rel="stylesheet" href="./葡萄藤PPT_files/zenburn.css">
    <!-- 打印和PDF输出样式 -->
    <script>
    var link = document.createElement('link');
    link.rel = 'stylesheet';
    link.type = 'text/css';
    link.href = window.location.search.match(/print-pdf/gi) ? '../css/reveal/print/pdf.css' : '../css/reveal/print/paper.css';
    document.getElementsByTagName('head')[0].appendChild(link);
    </script><link rel="stylesheet" type="text/css" href="./葡萄藤PPT_files/paper.css"><script type="text/javascript" src="./葡萄藤PPT_files/marked.js"></script><script type="text/javascript" src="./葡萄藤PPT_files/markdown.js"></script><script type="text/javascript" src="./葡萄藤PPT_files/notes.js"></script><script type="text/javascript" src="./葡萄藤PPT_files/highlight.js"></script>
</head>

<body>
    <img src="./葡萄藤PPT_files/logo.png" alt="" usemap="#pttmap" class="base-logo">
    <map name="pttmap">
        <area shape="rect" coords="0,0,276,58" href="http://www.jnshu.com/" alt="" target="_blank">
    </map>
    <div class="reveal slide center" role="application" data-transition-speed="default" data-background-transition="fade">
        <div class="slides" style="width: 960px; height: 700px; left: 50%; top: 50%; bottom: auto; right: auto; transform: translate(-50%, -50%) scale(0.833143);">
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <h2>JS中this的指向</h2>
                <h3>小课堂【</h3>
                <p>分享人：江吉仪</p>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>1.背景介绍</p>
                <p>2.知识剖析</p>
                <p>3.常见问题</p>
                <p>4.解决方案</p>
                <p>5.编码实战</p>
                <p>6.扩展思考</p>
                <p>7.参考文献</p>
                <p>8.更多讨论</p>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <h3>1.背景介绍</h3>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>在Java语言中，this关键字的含义是明确且具体的，表示当前对象。而在javascript中，this是动态绑定的，它可以是全局对象、当前对象或者任意对象，这完全取决于函数的调用方式。这就导致了this具备了多重含义，可以使得javascript更灵活的使用。但是，带来了灵活性的同时也会给我们初学者带来不少困惑。</p>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <h3>2.知识剖析</h3>
            </section>
           <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>全局环境中的this</p>
                <pre>                <code class="hljs livescript">
                  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);
                </code>
                </pre>
                <p>总结：在全局作用域中它的 this 执行当前的全局对象（浏览器端是 Window，node 中是 global）</p>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>严格模式 ‘use strict’下的this</p>
                <pre>                <code class="hljs javascript"><span class="hljs-meta">
                  'use strict'</span>;
                  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>{
                  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);
                  };

                  test();

                  <span class="hljs-comment">// undefined</span>
                </code>
                </pre>
                <p>原因：this 并不会指向全局，而是 undefined，这样的做法是为了消除 js 中一些不严谨的行为</p>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>在javascritp中，不一定只有对象方法的上下文中才有this， 全局函数调用和其他的几种不同的上下文中也有this指代。 它可以是全局对象、当前对象或者任意对象，这完全取决于函数的调用方式。JavaScript 中函数的调用有以下几种方式：作为对象方法调用，作为函数调用，作为构造函数调用，和使用 apply 或 call 调用。</p>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>1.作为对象方法调用:this 被自然绑定到该对象</p>
                <pre>                <code class="hljs actionscript">
                <span class="hljs-keyword">var</span> point = {
                x : <span class="hljs-number">0</span>,
                y : <span class="hljs-number">0</span>,
                moveTo : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x, y)</span> </span>{
                    <span class="hljs-keyword">this</span>.x = <span class="hljs-keyword">this</span>.x + x;
                    <span class="hljs-keyword">this</span>.y = <span class="hljs-keyword">this</span>.y + y;
                    }
                };

                point.moveTo(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<span class="hljs-comment">//this 绑定到当前对象，即 point 对象</span>
                </code>
            </pre>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>2.作为函数调用:this被绑定到全局对象</p>
                <pre>                <code class="hljs actionscript">
                  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeNoSense</span><span class="hljs-params">(x)</span> </span>{
                  <span class="hljs-keyword">this</span>.x = x;
                  }
                  makeNoSense(<span class="hljs-number">5</span>);
                  x;<span class="hljs-comment">// x 已经成为一个值为 5 的全局变量</span>
                </code>
                </pre>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>3.作为构造函数调用:this 绑定到新创建的对象上</p>
                <pre>                <code class="hljs actionscript">
                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Point</span><span class="hljs-params">(x, y)</span></span>{
                   <span class="hljs-keyword">this</span>.x = x;
                   <span class="hljs-keyword">this</span>.y = y;
                }
                </code>
                </pre>
                <p>注：构造函数不使用new调用，则和普通函数一样。一般地，构造函数首字母大写</p>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>4.使用 apply 或 call 调用：在 JavaScript 中函数也是对象，对象则有方法，apply 和 call 就是函数对象的方法。</p>
                <pre>                <code class="hljs actionscript">
                   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Point</span><span class="hljs-params">(x, y)</span></span>{
                      <span class="hljs-keyword">this</span>.x = x;
                      <span class="hljs-keyword">this</span>.y = y;
                      <span class="hljs-keyword">this</span>.moveTo = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x, y)</span></span>{
                          <span class="hljs-keyword">this</span>.x = x;
                          <span class="hljs-keyword">this</span>.y = y;
                      }
                   }

                   <span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> Point(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);
                   <span class="hljs-keyword">var</span> p2 = {x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span>};
                   p1.moveTo(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);
                   p1.moveTo.apply(p2, [<span class="hljs-number">10</span>, <span class="hljs-number">10</span>]);
                </code>
                </pre>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <h3>3、常见问题</h3>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>问题一</p>
                <pre>                <code class="hljs javascript">
                  <span class="hljs-keyword">var</span> obj = {
                   name: <span class="hljs-string">'qiutc'</span>,
                   foo: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
                     <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);
                   },
                   foo2: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
                     <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);
                     setTimeout(<span class="hljs-keyword">this</span>.foo, <span class="hljs-number">1000</span>);
                   }
                 }

                 obj.foo2();
                </code>
                </pre>
                <p>现象：两次打印的this不一样</p>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>问题二</p>
                <pre>                <code class="hljs javascript"><span class="hljs-meta">
                 'use strict'</span>;

                 <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>{
                   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);
                 }

                 setTimeout(foo, <span class="hljs-number">1</span>);

                 <span class="hljs-comment">// window</span>
                </code>
                </pre>
                <p>现象：加了严格模式，foo 调用也没有指定 this，应该是出来undefined，但是这里仍然出现了全局对象</p>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <h3>4、解决方案</h3>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>问题一可以这么这么解决：利用 闭包 的特性来处理</p>
                <pre>                <code class="hljs sqf">var obj = {
                      <span class="hljs-built_in">name</span>: <span class="hljs-string">'qiutc'</span>,
                      foo: function() {
                        console.<span class="hljs-built_in">log</span>(this);
                      },
                      foo2: function() {
                        console.<span class="hljs-built_in">log</span>(this);
                        var <span class="hljs-built_in">_this</span> = this;
                        setTimeout(function() {
                          console.<span class="hljs-built_in">log</span>(this);  <span class="hljs-comment">// Window</span>

                          console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">_this</span>);  <span class="hljs-comment">// Object {name: "qiutc"}</span>
                        }, <span class="hljs-number">1000</span>);
                      }
                    }

                    obj.foo2();</code>
                </pre>
                <p>可以看到直接用 this 仍然是 Window；因为 foo2 中的 this 是指向 obj，我们可以先用一个变量 _this 来储存，然后在回调函数中使用 _this，就可以指向当前的这个对象了</p>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
            <p>问题二可以这么这么解决：利用 闭包 的特性来处理</p>
                <pre>                <code class="hljs sqf">var obj = {
                      <span class="hljs-built_in">name</span>: <span class="hljs-string">'qiutc'</span>,
                      foo: function() {
                        console.<span class="hljs-built_in">log</span>(this);
                      },
                      foo2: function() {
                        console.<span class="hljs-built_in">log</span>(this);
                        var <span class="hljs-built_in">_this</span> = this;
                        setTimeout(function() {
                          console.<span class="hljs-built_in">log</span>(this);  <span class="hljs-comment">// Window</span>

                          console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">_this</span>);  <span class="hljs-comment">// Object {name: "qiutc"}</span>
                        }, <span class="hljs-number">1000</span>);
                      }
                    }

                    obj.foo2();</code>
                </pre>
                <p>可以看到直接用 this 仍然是 Window；因为 foo2 中的 this 是指向 obj，我们可以先用一个变量 _this 来储存，然后在回调函数中使用 _this，就可以指向当前的这个对象了</p>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <h3>5、编码实战</h3>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>
                    对于内部函数，即声明在另外一个函数体内的函数，这种绑定到全局对象的方式会产生另外一个问题。我们仍然以前面提到
                    的 point 对象为例，这次我们希望在 moveTo 方法内定义两个函数，分别将 x，y 坐标进行平移。结果可能出乎大家意
                    料，不仅 point 对象没有移动，反而多出两个全局变量 x，y
                </p>
                    <pre>                        <code class="hljs actionscript">
                        <span class="hljs-keyword">var</span> point = {
                        x : <span class="hljs-number">0</span>,
                        y : <span class="hljs-number">0</span>,
                        moveTo : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x, y)</span> </span>{
                        <span class="hljs-comment">// 内部函数</span>
                        <span class="hljs-keyword">var</span> moveX = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x)</span> </span>{
                        <span class="hljs-keyword">this</span>.x = x;<span class="hljs-comment">//this 绑定到了哪里？</span>
                        };
                        <span class="hljs-comment">// 内部函数</span>
                        <span class="hljs-keyword">var</span> moveY = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(y)</span> </span>{
                        <span class="hljs-keyword">this</span>.y = y;<span class="hljs-comment">//this 绑定到了哪里？</span>
                        };

                        moveX(x);
                        moveY(y);
                        }
                        };
                        point.moveTo(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);
                        point.x; <span class="hljs-comment">//==&gt;0</span>
                        point.y; <span class="hljs-comment">//==&gt;0</span>
                        x; <span class="hljs-comment">//==&gt;1</span>
                        y; <span class="hljs-comment">//==&gt;1</span>
                        </code>
                    </pre>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p>
                    这属于 JavaScript 的设计缺陷，正确的设计方式是内部函数的 this 应该绑定到其外层函数对应的对象上，为了规避这一设
                    计缺陷，聪明的 JavaScript 程序员想出了变量替代的方法，约定俗成，该变量一般被命名为 that。
                </p>
                    <pre>                       <code class="hljs actionscript">
                        <span class="hljs-keyword">var</span> point = {
                        x : <span class="hljs-number">0</span>,
                        y : <span class="hljs-number">0</span>,
                        moveTo : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x, y)</span> </span>{
                             <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;
                            <span class="hljs-comment">// 内部函数</span>
                            <span class="hljs-keyword">var</span> moveX = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x)</span> </span>{
                            that.x = x;
                            };
                            <span class="hljs-comment">// 内部函数</span>
                            <span class="hljs-keyword">var</span> moveY = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(y)</span> </span>{
                            that.y = y;
                            }
                            moveX(x);
                            moveY(y);
                            }
                        };
                        point.moveTo(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);
                        point.x; <span class="hljs-comment">//==&gt;1</span>
                        point.y; <span class="hljs-comment">//==&gt;1</span>
                       </code>
                    </pre>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <h3>6.扩展思考</h3>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 330px; display: none;">
                <p class="fragment visible" data-fragment-index="0">问题：如何理解this？</p>
                <p class="fragment visible" data-fragment-index="1">当一个函数被调用时，拥有它的object会作为this传入。在全局下，就是window or global，其他时候就是相应的object。 也可以看到，call和apply就是利用这一点实现更改this 值的</p>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 267px; display: none;">
                <h3>7.参考文献</h3>
            </section>
            <section hidden="" aria-hidden="true" class="past" style="top: 168px; display: block;">
                <p>参考一：<a href="https://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/">深入浅出 JavaScript 中的 this</a></p>
                <p>参考二：<a href="https://qiutc.me/post/this-this-this-in-javascript.html">JavaScript 中的 this !</a></p>
                <p>参考三：<a href="http://caibaojian.com/toutiao/6859">JavaScript中的this用法与指向</a></p>
                <p>参考四：<a href="https://www.zhihu.com/question/19636194">如何理解 JavaScript 中的 this 关键字？</a></p>
            </section>
            <section class="past" style="top: 168px; display: block;" hidden="" aria-hidden="true">
                <h3>8、更多讨论</h3>
            </section>
            <section class="present" style="top: 212.5px; display: block;">
                <h4>鸣谢</h4>
                <p>感谢大家观看</p>
                <p><small>BY : 陈冲 | 赵锐泉 | 郑明月| 江吉仪</small></p>
            </section>
        </div>
    <div class="backgrounds"><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" style="display: none;"></div><div class="slide-background past" data-loaded="true" style="display: none;"></div><div class="slide-background past" data-loaded="true" style="display: block;"></div><div class="slide-background past" data-loaded="true" style="display: block;"></div><div class="slide-background present" data-loaded="true" style="display: block;"></div></div><div class="progress" style="display: block;"><span style="width: 1024px;"></span></div><aside class="controls" style="display: block;"><button class="navigate-left enabled" aria-label="previous slide"></button><button class="navigate-right" aria-label="next slide"></button><button class="navigate-up" aria-label="above slide"></button><button class="navigate-down" aria-label="below slide"></button></aside><div class="slide-number" style="display: none;"></div><div class="speaker-notes" data-prevent-swipe=""></div><div class="pause-overlay"></div><div id="aria-status-div" aria-live="polite" aria-atomic="true" style="position: absolute; height: 1px; width: 1px; overflow: hidden; clip: rect(1px, 1px, 1px, 1px);">
                鸣谢
                感谢大家观看
                BY : 陈冲 | 赵锐泉 | 郑明月
            </div></div>
    <script src="./葡萄藤PPT_files/head.min.js"></script>
    <script src="./葡萄藤PPT_files/reveal.js"></script>
    <script>
    // 以下为常见配置属性的默认值
    // {
    //  controls: true, // 是否在右下角展示控制条
    //  progress: true, // 是否显示演示的进度条
    //  slideNumber: false, // 是否显示当前幻灯片的页数编号，也可以使用代码slideNumber: 'c / t' ，表示当前页/总页数。
    //  history: false, // 是否将每个幻灯片改变加入到浏览器的历史记录中去
    //  keyboard: true, // 是否启用键盘快捷键来导航
    //  overview: true, // 是否启用幻灯片的概览模式，可使用"Esc"或"o"键来切换概览模式
    //  center: true, // 是否将幻灯片垂直居中
    //  touch: true, // 是否在触屏设备上启用触摸滑动切换
    //  loop: false, // 是否循环演示
    //  rtl: false, // 是否将演示的方向变成RTL，即从右往左
    //  fragments: true, // 全局开启和关闭碎片。
    //  autoSlide: 0, // 两个幻灯片之间自动切换的时间间隔（毫秒），当设置成 0 的时候则禁止自动切换，该值可以被幻灯片上的 ` data-autoslide` 属性覆盖
    //  transition: 'default', // 切换过渡效果，有none/fade/slide/convex/concave/zoom
    //  transitionSpeed: 'default', // 过渡速度，default/fast/slow
    //  mouseWheel: true, //是否启用通过鼠标滚轮来切换幻灯片
    // }

    // 初始化幻灯片
    Reveal.initialize({
        history: true,
        dependencies: [{
            src: '../plugin/markdown/marked.js'
        }, {
            src: '../plugin/markdown/markdown.js'
        }, {
            src: '../plugin/notes/notes.js',
            async: true
        }, {
            src: '../plugin/highlight/highlight.js',
            async: true,
            callback: function() {
                hljs.initHighlightingOnLoad();
            }
        }]
    });
    </script>



</body></html>